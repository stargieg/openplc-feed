diff --git a/core/hardware_layers/raspberrypi_raspicomm.cpp b/core/hardware_layers/raspberrypi_raspicomm.cpp
new file mode 100644
index 0000000..161eb49
--- /dev/null
+++ b/core/hardware_layers/raspberrypi_raspicomm.cpp
@@ -0,0 +1,145 @@
+//-----------------------------------------------------------------------------
+// Copyright 2015 Thiago Alves
+//
+// Based on the LDmicro software by Jonathan Westhues
+// This file is part of the OpenPLC Software Stack.
+//
+// OpenPLC is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// OpenPLC is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with OpenPLC.  If not, see <http://www.gnu.org/licenses/>.
+//------
+//
+// This file is the hardware layer for the OpenPLC. If you change the platform
+// where it is running, you may only need to change this file. All the I/O
+// related stuff is here. Basically it provides functions to read and write
+// to the OpenPLC internal buffers in order to update I/O state.
+// Thiago Alves, Dec 2015
+//-----------------------------------------------------------------------------
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <wiringPi.h>
+#include <wiringSerial.h>
+#include <pthread.h>
+
+#include "ladder.h"
+#include "custom_layer.h"
+
+#if !defined(ARRAY_SIZE)
+    #define ARRAY_SIZE(x) (sizeof((x)) / sizeof((x)[0]))
+#endif
+
+#define MAX_INPUT 		5
+#define MAX_OUTPUT 		2
+
+/********************I/O PINS CONFIGURATION*********************
+ * A good source for RaspberryPi I/O pins information is:
+ * http://pinout.xyz
+ *
+ * The buffers below works as an internal mask, so that the
+ * OpenPLC can access each pin sequentially
+****************************************************************/
+//inBufferPinMask: pin mask for each input, which
+//means what pin is mapped to that OpenPLC input
+/*
+%IX0.0	7	4 = right side (towards HDMI)
+%IX0.1	3	22 = push
+%IX0.2	4	23 = bottom side (towards power connection)
+%IX0.3	5	24 = left side (towards audio out)
+%IX0.4	6	25 = top side(towards usb)
+*/
+int inBufferPinMask[MAX_INPUT] = { 7, 3, 4, 5, 6 };
+
+//outBufferPinMask: pin mask for each output, which
+//means what pin is mapped to that OpenPLC output
+/*
+%QX0.0	1 Output 1 (D1): GPIO 18
+%QX0.1	2 Output 2 (D2): GPIO 21 (Raspberry Pi rev.1) or GPIO 27 (Raspberry Pi rev.2)
+*/
+int outBufferPinMask[MAX_OUTPUT] = { 1, 2 };
+
+//-----------------------------------------------------------------------------
+// This function is called by the main OpenPLC routine when it is initializing.
+// Hardware initialization procedures should be here.
+//-----------------------------------------------------------------------------
+void initializeHardware()
+{
+	wiringPiSetup();
+	//piHiPri(99);
+
+	//set pins as input
+	for (int i = 0; i < MAX_INPUT; i++)
+	{
+	    if (pinNotPresent(ignored_bool_inputs, ARRAY_SIZE(ignored_bool_inputs), i))
+	    {
+		    pinMode(inBufferPinMask[i], INPUT);
+		    if (i != 0 && i != 1) //pull down can't be enabled on the first two pins
+		    {
+			    pullUpDnControl(inBufferPinMask[i], PUD_DOWN); //pull down enabled
+		    }
+	    }
+	}
+
+	//set pins as output
+	for (int i = 0; i < MAX_OUTPUT; i++)
+	{
+	    if (pinNotPresent(ignored_bool_outputs, ARRAY_SIZE(ignored_bool_outputs), i))
+	    	pinMode(outBufferPinMask[i], OUTPUT);
+	}
+}
+
+//-----------------------------------------------------------------------------
+// This function is called by the main OpenPLC routine when it is finalizing.
+// Resource clearing procedures should be here.
+//-----------------------------------------------------------------------------
+void finalizeHardware()
+{
+}
+
+//-----------------------------------------------------------------------------
+// This function is called by the OpenPLC in a loop. Here the internal buffers
+// must be updated to reflect the actual state of the input pins. The mutex buffer_lock
+// must be used to protect access to the buffers on a threaded environment.
+//-----------------------------------------------------------------------------
+void updateBuffersIn()
+{
+	pthread_mutex_lock(&bufferLock); //lock mutex
+
+	//INPUT
+	for (int i = 0; i < MAX_INPUT; i++)
+	{
+	    if (pinNotPresent(ignored_bool_inputs, ARRAY_SIZE(ignored_bool_inputs), i))
+    		if (bool_input[i/8][i%8] != NULL) *bool_input[i/8][i%8] = digitalRead(inBufferPinMask[i]);
+	}
+
+	pthread_mutex_unlock(&bufferLock); //unlock mutex
+}
+
+//-----------------------------------------------------------------------------
+// This function is called by the OpenPLC in a loop. Here the internal buffers
+// must be updated to reflect the actual state of the output pins. The mutex buffer_lock
+// must be used to protect access to the buffers on a threaded environment.
+//-----------------------------------------------------------------------------
+void updateBuffersOut()
+{
+	pthread_mutex_lock(&bufferLock); //lock mutex
+
+	//OUTPUT
+	for (int i = 0; i < MAX_OUTPUT; i++)
+	{
+	    if (pinNotPresent(ignored_bool_outputs, ARRAY_SIZE(ignored_bool_outputs), i))
+    		if (bool_output[i/8][i%8] != NULL) digitalWrite(outBufferPinMask[i], *bool_output[i/8][i%8]);
+	}
+
+	pthread_mutex_unlock(&bufferLock); //unlock mutex
+}
diff --git a/scripts/change_hardware_layer.sh b/scripts/change_hardware_layer.sh
index 12f7a5d..b38d5d8 100755
--- a/scripts/change_hardware_layer.sh
+++ b/scripts/change_hardware_layer.sh
@@ -80,6 +80,13 @@ elif [[ $1 == opi* ]]; then
     echo opi > ../scripts/openplc_platform
     echo "$1" > ../scripts/openplc_driver
 
+elif [ "$1" == "rpi_raspicomm" ]; then
+    echo "Activating Raspberry Pi 2011 driver with Raspi Comm"
+    cp ./hardware_layers/raspberrypi_raspicomm.cpp ./hardware_layer.cpp
+    echo "Setting Platform"
+    echo rpi > ../scripts/openplc_platform
+    echo rpi_raspicomm > ../scripts/openplc_driver
+
 elif [ "$1" == "simulink" ]; then
     echo "Activating Simulink driver"
     cp ./hardware_layers/simulink.cpp ./hardware_layer.cpp
diff --git a/webserver.py b/webserver.py
index b4f8ecd..d6d3dbf 100644
--- a/webserver.py
+++ b/webserver.py
@@ -1730,6 +1730,8 @@ def hardware():
             else: return_str += "<option value='rpi'>Raspberry Pi</option>"
             if (current_driver == "rpi_old"): return_str += "<option selected='selected' value='rpi_old'>Raspberry Pi - Old Model (2011 model B)</option>"
             else: return_str += "<option value='rpi_old'>Raspberry Pi - Old Model (2011 model B)</option>"
+            if (current_driver == "rpi_raspicomm"): return_str += "<option selected='selected' value='rpi_raspicomm'>Raspberry Pi - Old Model (2011 model B) with Raspi Comm</option>"
+            else: return_str += "<option value='rpi_raspicomm'>Raspberry Pi - Old Model (2011 model B) with Raspi Comm</option>"
             if (current_driver == "opi_zero2"): return_str += "<option selected='selected' value='opi_zero2'>Orange Pi Zero2/Zero2 LTS/Zero2 B</option>"
             else: return_str += "<option value='opi_zero2'>Orange Pi Zero2/Zero2 LTS/Zero2 B</option>"
             if (current_driver == "simulink"): return_str += "<option selected='selected' value='simulink'>Simulink</option>"
